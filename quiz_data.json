[{"Question": "What does it mean to pass by value and pass by reference?\n", "Answer": "When passing by value, the values cannot be changed once created. A copy is passed and the original value outside the function remains the same. When passing by reference, the value can be changed. Changing the value inside the function also changes the original value.\n"}, {"Question": "<p>Which are valid HTTP methods? (Select all that apply)</p>\n", "Answer": "<p><strong>Answer</strong>:</p><p>C) POST</p><p>E) OPTIONS</p><p>G) PATCH</p><p>H) HEAD</p><p><strong>Explanation</strong>:</p><p>POST: This method is used to send data to a server to create or update a resource. It is widely used for submitting form data or uploading files.\nOPTIONS: This method is used to describe the communication options for the target resource. It allows the client to discover which HTTP methods are supported by the server for a particular resource.\nPATCH: This method is used to apply partial modifications to a resource. Unlike PUT, which replaces the entire resource, PATCH only updates the specified fields.\nHEAD: This method is similar to GET but only retrieves the headers of a resource, not the body. It is useful for checking what a GET request will return before making the request.</p><p>There are more HTTP methods that you may have come across too, e.g., DELETE etc.</p><p><strong>If you got this wrong</strong>: Go through the associated resources below</p><ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods\" target=\"\\_blank\" rel=\"noopener noreferrer\">\ud83d\udd17 - HTTP Methods</a></li>\n</ul>\n"}, {"Question": "State the key features of a HTTP request\n", "Answer": "- URL\n- Method \n- List of Headers\n- The body\n"}, {"Question": "Can functions that use global variables rather than parameters be test easily? \n", "Answer": "No\n"}, {"Question": "<p>Communication across Sigma Labs training and deployment should always align with three key qualities. Which of the following is not one of them?</p>\n", "Answer": "<p><strong>Answer</strong>:</p><p>C) Collaborative</p>\n"}, {"Question": "What is the difference between a fault and an error?\n", "Answer": "Faults are defects found in the implementation. An error is the response to the fault and is found during the execution of the program. \n"}, {"Question": "<p>Why would we prefer to execute code on the backend, rather than the frontend (in the user&#x27;s browser)? Select all that apply:</p>\n", "Answer": "<p><strong>Answer</strong>:</p><p>B) To keep sensitive logic and data secure, as code executed in the frontend can be exposed to users.</p><p>D) To ensure consistent execution of code across all clients, regardless of the user\u2019s browser or device.</p><p><strong>Explanation</strong>:</p><p>Writing code for an explicit backend allows us to <strong>maintain separation of concerns</strong>.</p><p>A large part of this is <strong>security</strong> - we wouldn&#x27;t want users to be able to see what&#x27;s happening behind the scenes or be able to use or access private data.</p><p>Furthermore, when code runs on the backend, it ensures that the behavior is the same across all clients (browsers, devices), as different frontend environments may handle code execution differently.</p><p>It also makes <strong>maintaining code much more manageable</strong> and <strong>makes the code more readable</strong> and <strong>easier to test and debug</strong>.</p>\n"}, {"Question": "What is the naming convention (for variable names, function names, etc.) applied by Python?\n", "Answer": "Snake case or snake\\_case\n"}, {"Question": "<p>Without running it, what will the output of the following code be?</p><div class=\"language-py codeBlockContainer_Ckt0 theme-code-block\" style=\"--prism-color:#bfc7d5;--prism-background-color:#292d3e\"><div class=\"codeBlockContent_QJqH\"><pre tabindex=\"0\" class=\"prism-code language-py codeBlock_bY9V thin-scrollbar\" style=\"color:#bfc7d5;background-color:#292d3e\"><code class=\"codeBlockLines_e6Vv\"><span class=\"token-line\" style=\"color:#bfc7d5\"><span class=\"token keyword\" style=\"font-style:italic\">if</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:rgb(199, 146, 234)\">(</span><span class=\"token boolean\" style=\"color:rgb(255, 88, 116)\">None</span><span class=\"token plain\"> </span><span class=\"token keyword\" style=\"font-style:italic\">is</span><span class=\"token plain\"> </span><span class=\"token boolean\" style=\"color:rgb(255, 88, 116)\">None</span><span class=\"token punctuation\" style=\"color:rgb(199, 146, 234)\">)</span><span class=\"token punctuation\" style=\"color:rgb(199, 146, 234)\">:</span><span class=\"token plain\"></span><br/></span><span class=\"token-line\" style=\"color:#bfc7d5\"><span class=\"token plain\">  </span><span class=\"token keyword\" style=\"font-style:italic\">print</span><span class=\"token punctuation\" style=\"color:rgb(199, 146, 234)\">(</span><span class=\"token string\" style=\"color:rgb(195, 232, 141)\">&#x27;Equal!&#x27;</span><span class=\"token punctuation\" style=\"color:rgb(199, 146, 234)\">)</span><span class=\"token plain\"></span><br/></span><span class=\"token-line\" style=\"color:#bfc7d5\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"font-style:italic\">else</span><span class=\"token punctuation\" style=\"color:rgb(199, 146, 234)\">:</span><span class=\"token plain\"></span><br/></span><span class=\"token-line\" style=\"color:#bfc7d5\"><span class=\"token plain\">  </span><span class=\"token keyword\" style=\"font-style:italic\">print</span><span class=\"token punctuation\" style=\"color:rgb(199, 146, 234)\">(</span><span class=\"token string\" style=\"color:rgb(195, 232, 141)\">&#x27;Not equal!&#x27;</span><span class=\"token punctuation\" style=\"color:rgb(199, 146, 234)\">)</span><br/></span></code></pre></div></div>\n", "Answer": "<p><strong>Answer</strong>:</p><p>A) <code>Equal!</code></p><p><strong>Explanation</strong>:</p><p>The <code>is</code> operator checks for object identity, meaning it checks whether two references point to the same object in memory.\nIn Python, <code>None</code> is a singleton object, meaning there is only one instance of <code>None</code> in memory. Therefore, <code>None is None</code> evaluates to <code>True</code> because <code>is</code> checks for object identity.</p>\n"}, {"Question": "<p>Identify the error in this code snippet:</p><div class=\"language-py codeBlockContainer_Ckt0 theme-code-block\" style=\"--prism-color:#bfc7d5;--prism-background-color:#292d3e\"><div class=\"codeBlockContent_QJqH\"><pre tabindex=\"0\" class=\"prism-code language-py codeBlock_bY9V thin-scrollbar\" style=\"color:#bfc7d5;background-color:#292d3e\"><code class=\"codeBlockLines_e6Vv\"><span class=\"token-line\" style=\"color:#bfc7d5\"><span class=\"token keyword\" style=\"font-style:italic\">def</span><span class=\"token plain\"> </span><span class=\"token function\" style=\"color:rgb(130, 170, 255)\">print_details</span><span class=\"token punctuation\" style=\"color:rgb(199, 146, 234)\">(</span><span class=\"token plain\">name</span><span class=\"token punctuation\" style=\"color:rgb(199, 146, 234)\">,</span><span class=\"token plain\"> age</span><span class=\"token punctuation\" style=\"color:rgb(199, 146, 234)\">)</span><span class=\"token punctuation\" style=\"color:rgb(199, 146, 234)\">:</span><span class=\"token plain\"></span><br/></span><span class=\"token-line\" style=\"color:#bfc7d5\"><span class=\"token plain\">    </span><span class=\"token keyword\" style=\"font-style:italic\">print</span><span class=\"token punctuation\" style=\"color:rgb(199, 146, 234)\">(</span><span class=\"token string-interpolation string\" style=\"color:rgb(195, 232, 141)\">f&quot;Name: </span><span class=\"token string-interpolation interpolation punctuation\" style=\"color:rgb(199, 146, 234)\">{</span><span class=\"token string-interpolation interpolation\">name</span><span class=\"token string-interpolation interpolation punctuation\" style=\"color:rgb(199, 146, 234)\">}</span><span class=\"token string-interpolation string\" style=\"color:rgb(195, 232, 141)\">, Age: </span><span class=\"token string-interpolation interpolation punctuation\" style=\"color:rgb(199, 146, 234)\">{</span><span class=\"token string-interpolation interpolation\">age</span><span class=\"token string-interpolation interpolation punctuation\" style=\"color:rgb(199, 146, 234)\">}</span><span class=\"token string-interpolation string\" style=\"color:rgb(195, 232, 141)\">&quot;</span><span class=\"token punctuation\" style=\"color:rgb(199, 146, 234)\">)</span><span class=\"token plain\"></span><br/></span><span class=\"token-line\" style=\"color:#bfc7d5\"><span class=\"token plain\" style=\"display:inline-block\"></span><br/></span><span class=\"token-line\" style=\"color:#bfc7d5\"><span class=\"token plain\">print_details</span><span class=\"token punctuation\" style=\"color:rgb(199, 146, 234)\">(</span><span class=\"token string\" style=\"color:rgb(195, 232, 141)\">&quot;John&quot;</span><span class=\"token punctuation\" style=\"color:rgb(199, 146, 234)\">)</span><br/></span></code></pre></div></div>\n", "Answer": "<p><strong>Answer</strong>:</p><p>B) TypeError</p><p><strong>Explanation</strong>:</p><p>The function print\\_details requires two arguments, but only one is provided when it is called. This results in a <code>TypeError</code> as the second argument is missing.</p><p>It would look like this:</p><blockquote>\n<p>TypeError: <code>print\\_details()</code> missing 1 required positional argument: <code>age</code></p>\n</blockquote>\n"}, {"Question": "Is there a difference between having a non primitive and a primitive input for a function? If so, please explain this difference.\n", "Answer": "primitive inputs create a copy of that variable but non primitive inputs create a reference to the input.\n"}, {"Question": "<p>Is this API RESTful?</p><div class=\"language-py codeBlockContainer_Ckt0 theme-code-block\" style=\"--prism-color:#bfc7d5;--prism-background-color:#292d3e\"><div class=\"codeBlockContent_QJqH\"><pre tabindex=\"0\" class=\"prism-code language-py codeBlock_bY9V thin-scrollbar\" style=\"color:#bfc7d5;background-color:#292d3e\"><code class=\"codeBlockLines_e6Vv\"><span class=\"token-line\" style=\"color:#bfc7d5\"><span class=\"token keyword\" style=\"font-style:italic\">from</span><span class=\"token plain\"> flask </span><span class=\"token keyword\" style=\"font-style:italic\">import</span><span class=\"token plain\"> Flask</span><span class=\"token punctuation\" style=\"color:rgb(199, 146, 234)\">,</span><span class=\"token plain\"> request</span><br/></span><span class=\"token-line\" style=\"color:#bfc7d5\"><span class=\"token plain\" style=\"display:inline-block\"></span><br/></span><span class=\"token-line\" style=\"color:#bfc7d5\"><span class=\"token plain\">app </span><span class=\"token operator\" style=\"color:rgb(137, 221, 255)\">=</span><span class=\"token plain\"> Flask</span><span class=\"token punctuation\" style=\"color:rgb(199, 146, 234)\">(</span><span class=\"token plain\">**name**</span><span class=\"token punctuation\" style=\"color:rgb(199, 146, 234)\">)</span><span class=\"token plain\"></span><br/></span><span class=\"token-line\" style=\"color:#bfc7d5\"><span class=\"token plain\" style=\"display:inline-block\"></span><br/></span><span class=\"token-line\" style=\"color:#bfc7d5\"><span class=\"token plain\"></span><span class=\"token decorator annotation punctuation\" style=\"color:rgb(199, 146, 234)\">@app</span><span class=\"token decorator annotation punctuation\" style=\"color:rgb(199, 146, 234)\">.</span><span class=\"token decorator annotation punctuation\" style=\"color:rgb(199, 146, 234)\">route</span><span class=\"token punctuation\" style=\"color:rgb(199, 146, 234)\">(</span><span class=\"token string\" style=\"color:rgb(195, 232, 141)\">&#x27;/user/&lt;username&gt;&#x27;</span><span class=\"token punctuation\" style=\"color:rgb(199, 146, 234)\">,</span><span class=\"token plain\"> methods</span><span class=\"token operator\" style=\"color:rgb(137, 221, 255)\">=</span><span class=\"token punctuation\" style=\"color:rgb(199, 146, 234)\">[</span><span class=\"token string\" style=\"color:rgb(195, 232, 141)\">&#x27;PUT&#x27;</span><span class=\"token punctuation\" style=\"color:rgb(199, 146, 234)\">]</span><span class=\"token punctuation\" style=\"color:rgb(199, 146, 234)\">)</span><span class=\"token plain\"></span><br/></span><span class=\"token-line\" style=\"color:#bfc7d5\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"font-style:italic\">def</span><span class=\"token plain\"> </span><span class=\"token function\" style=\"color:rgb(130, 170, 255)\">get_user</span><span class=\"token punctuation\" style=\"color:rgb(199, 146, 234)\">(</span><span class=\"token plain\">username</span><span class=\"token punctuation\" style=\"color:rgb(199, 146, 234)\">)</span><span class=\"token punctuation\" style=\"color:rgb(199, 146, 234)\">:</span><span class=\"token plain\"></span><br/></span><span class=\"token-line\" style=\"color:#bfc7d5\"><span class=\"token plain\">    </span><span class=\"token comment\" style=\"color:rgb(105, 112, 152);font-style:italic\"># code to retrieve username here\u2026</span><span class=\"token plain\"></span><br/></span><span class=\"token-line\" style=\"color:#bfc7d5\"><span class=\"token plain\">    </span><span class=\"token keyword\" style=\"font-style:italic\">return</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:rgb(199, 146, 234)\">{</span><span class=\"token string\" style=\"color:rgb(195, 232, 141)\">&quot;username&quot;</span><span class=\"token punctuation\" style=\"color:rgb(199, 146, 234)\">:</span><span class=\"token plain\"> username</span><span class=\"token punctuation\" style=\"color:rgb(199, 146, 234)\">,</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:rgb(195, 232, 141)\">&quot;info&quot;</span><span class=\"token punctuation\" style=\"color:rgb(199, 146, 234)\">:</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:rgb(195, 232, 141)\">&quot;User info&quot;</span><span class=\"token punctuation\" style=\"color:rgb(199, 146, 234)\">}</span><span class=\"token punctuation\" style=\"color:rgb(199, 146, 234)\">,</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:rgb(247, 140, 108)\">200</span><span class=\"token plain\"></span><br/></span><span class=\"token-line\" style=\"color:#bfc7d5\"><span class=\"token plain\" style=\"display:inline-block\"></span><br/></span><span class=\"token-line\" style=\"color:#bfc7d5\"><span class=\"token plain\"></span><span class=\"token decorator annotation punctuation\" style=\"color:rgb(199, 146, 234)\">@app</span><span class=\"token decorator annotation punctuation\" style=\"color:rgb(199, 146, 234)\">.</span><span class=\"token decorator annotation punctuation\" style=\"color:rgb(199, 146, 234)\">route</span><span class=\"token punctuation\" style=\"color:rgb(199, 146, 234)\">(</span><span class=\"token string\" style=\"color:rgb(195, 232, 141)\">&#x27;/alter_user/&lt;username&gt;&#x27;</span><span class=\"token punctuation\" style=\"color:rgb(199, 146, 234)\">,</span><span class=\"token plain\"> methods</span><span class=\"token operator\" style=\"color:rgb(137, 221, 255)\">=</span><span class=\"token punctuation\" style=\"color:rgb(199, 146, 234)\">[</span><span class=\"token string\" style=\"color:rgb(195, 232, 141)\">&#x27;POST&#x27;</span><span class=\"token punctuation\" style=\"color:rgb(199, 146, 234)\">]</span><span class=\"token punctuation\" style=\"color:rgb(199, 146, 234)\">)</span><span class=\"token plain\"></span><br/></span><span class=\"token-line\" style=\"color:#bfc7d5\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"font-style:italic\">def</span><span class=\"token plain\"> </span><span class=\"token function\" style=\"color:rgb(130, 170, 255)\">set\\_user</span><span class=\"token punctuation\" style=\"color:rgb(199, 146, 234)\">(</span><span class=\"token plain\">username</span><span class=\"token punctuation\" style=\"color:rgb(199, 146, 234)\">)</span><span class=\"token punctuation\" style=\"color:rgb(199, 146, 234)\">:</span><span class=\"token plain\"></span><br/></span><span class=\"token-line\" style=\"color:#bfc7d5\"><span class=\"token plain\">    data </span><span class=\"token operator\" style=\"color:rgb(137, 221, 255)\">=</span><span class=\"token plain\"> request</span><span class=\"token punctuation\" style=\"color:rgb(199, 146, 234)\">.</span><span class=\"token plain\">json</span><br/></span><span class=\"token-line\" style=\"color:#bfc7d5\"><span class=\"token plain\">    </span><span class=\"token comment\" style=\"color:rgb(105, 112, 152);font-style:italic\"># code to update username here\u2026</span><span class=\"token plain\"></span><br/></span><span class=\"token-line\" style=\"color:#bfc7d5\"><span class=\"token plain\">    </span><span class=\"token keyword\" style=\"font-style:italic\">return</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:rgb(199, 146, 234)\">{</span><span class=\"token string\" style=\"color:rgb(195, 232, 141)\">&quot;message&quot;</span><span class=\"token punctuation\" style=\"color:rgb(199, 146, 234)\">:</span><span class=\"token plain\"> </span><span class=\"token string-interpolation string\" style=\"color:rgb(195, 232, 141)\">f&quot;User </span><span class=\"token string-interpolation interpolation punctuation\" style=\"color:rgb(199, 146, 234)\">{</span><span class=\"token string-interpolation interpolation\">username</span><span class=\"token string-interpolation interpolation punctuation\" style=\"color:rgb(199, 146, 234)\">}</span><span class=\"token string-interpolation string\" style=\"color:rgb(195, 232, 141)\"> updated!&quot;</span><span class=\"token punctuation\" style=\"color:rgb(199, 146, 234)\">}</span><span class=\"token punctuation\" style=\"color:rgb(199, 146, 234)\">,</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:rgb(247, 140, 108)\">200</span><span class=\"token plain\"></span><br/></span><span class=\"token-line\" style=\"color:#bfc7d5\"><span class=\"token plain\" style=\"display:inline-block\"></span><br/></span><span class=\"token-line\" style=\"color:#bfc7d5\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"font-style:italic\">if</span><span class=\"token plain\"> **name** </span><span class=\"token operator\" style=\"color:rgb(137, 221, 255)\">==</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:rgb(195, 232, 141)\">&#x27;**main**&#x27;</span><span class=\"token punctuation\" style=\"color:rgb(199, 146, 234)\">:</span><span class=\"token plain\"></span><br/></span><span class=\"token-line\" style=\"color:#bfc7d5\"><span class=\"token plain\">    app</span><span class=\"token punctuation\" style=\"color:rgb(199, 146, 234)\">.</span><span class=\"token plain\">run</span><span class=\"token punctuation\" style=\"color:rgb(199, 146, 234)\">(</span><span class=\"token plain\">debug</span><span class=\"token operator\" style=\"color:rgb(137, 221, 255)\">=</span><span class=\"token boolean\" style=\"color:rgb(255, 88, 116)\">True</span><span class=\"token punctuation\" style=\"color:rgb(199, 146, 234)\">)</span><br/></span></code></pre></div></div>\n", "Answer": "<p><strong>Answer</strong>:</p><p>C) No, because endpoints and methods are not standardised.</p><p><strong>Explanation</strong>:</p><p>Because the endpoints and methods are not standardised, it breaks the \u201cuniform interface\u201d constraint. The endpoints <code>PUT /user/&lt;username&gt;</code> and <code> POST /alter\\_user/&lt;username&gt;</code> do not seem to use a standardised naming convention, and use HTTP methods in non-standard ways. While caching is not used in this example, it is not necessary in this case.\nA RESTful version might look like this:</p><div class=\"language-py codeBlockContainer_Ckt0 theme-code-block\" style=\"--prism-color:#bfc7d5;--prism-background-color:#292d3e\"><div class=\"codeBlockContent_QJqH\"><pre tabindex=\"0\" class=\"prism-code language-py codeBlock_bY9V thin-scrollbar\" style=\"color:#bfc7d5;background-color:#292d3e\"><code class=\"codeBlockLines_e6Vv\"><span class=\"token-line\" style=\"color:#bfc7d5\"><span class=\"token decorator annotation punctuation\" style=\"color:rgb(199, 146, 234)\">@app</span><span class=\"token decorator annotation punctuation\" style=\"color:rgb(199, 146, 234)\">.</span><span class=\"token decorator annotation punctuation\" style=\"color:rgb(199, 146, 234)\">route</span><span class=\"token punctuation\" style=\"color:rgb(199, 146, 234)\">(</span><span class=\"token string\" style=\"color:rgb(195, 232, 141)\">&#x27;/users/&lt;username&gt;&#x27;</span><span class=\"token punctuation\" style=\"color:rgb(199, 146, 234)\">,</span><span class=\"token plain\"> methods</span><span class=\"token operator\" style=\"color:rgb(137, 221, 255)\">=</span><span class=\"token punctuation\" style=\"color:rgb(199, 146, 234)\">[</span><span class=\"token string\" style=\"color:rgb(195, 232, 141)\">&#x27;GET&#x27;</span><span class=\"token punctuation\" style=\"color:rgb(199, 146, 234)\">,</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:rgb(195, 232, 141)\">&#x27;POST&#x27;</span><span class=\"token punctuation\" style=\"color:rgb(199, 146, 234)\">]</span><span class=\"token punctuation\" style=\"color:rgb(199, 146, 234)\">)</span><span class=\"token plain\"></span><br/></span><span class=\"token-line\" style=\"color:#bfc7d5\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"font-style:italic\">def</span><span class=\"token plain\"> </span><span class=\"token function\" style=\"color:rgb(130, 170, 255)\">user</span><span class=\"token punctuation\" style=\"color:rgb(199, 146, 234)\">(</span><span class=\"token plain\">username</span><span class=\"token punctuation\" style=\"color:rgb(199, 146, 234)\">)</span><span class=\"token punctuation\" style=\"color:rgb(199, 146, 234)\">:</span><span class=\"token plain\"></span><br/></span><span class=\"token-line\" style=\"color:#bfc7d5\"><span class=\"token plain\">    </span><span class=\"token keyword\" style=\"font-style:italic\">if</span><span class=\"token plain\"> request</span><span class=\"token punctuation\" style=\"color:rgb(199, 146, 234)\">.</span><span class=\"token plain\">method </span><span class=\"token operator\" style=\"color:rgb(137, 221, 255)\">==</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:rgb(195, 232, 141)\">&quot;GET&quot;</span><span class=\"token punctuation\" style=\"color:rgb(199, 146, 234)\">:</span><span class=\"token plain\"></span><br/></span><span class=\"token-line\" style=\"color:#bfc7d5\"><span class=\"token plain\">        </span><span class=\"token comment\" style=\"color:rgb(105, 112, 152);font-style:italic\"># code to retrieve username here\u2026</span><span class=\"token plain\"></span><br/></span><span class=\"token-line\" style=\"color:#bfc7d5\"><span class=\"token plain\">        </span><span class=\"token keyword\" style=\"font-style:italic\">return</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:rgb(199, 146, 234)\">{</span><span class=\"token string\" style=\"color:rgb(195, 232, 141)\">&quot;username&quot;</span><span class=\"token punctuation\" style=\"color:rgb(199, 146, 234)\">:</span><span class=\"token plain\"> username</span><span class=\"token punctuation\" style=\"color:rgb(199, 146, 234)\">,</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:rgb(195, 232, 141)\">&quot;info&quot;</span><span class=\"token punctuation\" style=\"color:rgb(199, 146, 234)\">:</span><span class=\"token plain\"> </span><span class=\"token string\" style=\"color:rgb(195, 232, 141)\">&quot;User info&quot;</span><span class=\"token punctuation\" style=\"color:rgb(199, 146, 234)\">}</span><span class=\"token punctuation\" style=\"color:rgb(199, 146, 234)\">,</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:rgb(247, 140, 108)\">200</span><span class=\"token plain\"></span><br/></span><span class=\"token-line\" style=\"color:#bfc7d5\"><span class=\"token plain\">    </span><span class=\"token keyword\" style=\"font-style:italic\">else</span><span class=\"token punctuation\" style=\"color:rgb(199, 146, 234)\">:</span><span class=\"token plain\"></span><br/></span><span class=\"token-line\" style=\"color:#bfc7d5\"><span class=\"token plain\">        data </span><span class=\"token operator\" style=\"color:rgb(137, 221, 255)\">=</span><span class=\"token plain\"> request</span><span class=\"token punctuation\" style=\"color:rgb(199, 146, 234)\">.</span><span class=\"token plain\">json</span><br/></span><span class=\"token-line\" style=\"color:#bfc7d5\"><span class=\"token plain\">        </span><span class=\"token comment\" style=\"color:rgb(105, 112, 152);font-style:italic\"># code to update username here\u2026</span><span class=\"token plain\"></span><br/></span><span class=\"token-line\" style=\"color:#bfc7d5\"><span class=\"token plain\">        </span><span class=\"token keyword\" style=\"font-style:italic\">return</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:rgb(199, 146, 234)\">{</span><span class=\"token string\" style=\"color:rgb(195, 232, 141)\">&quot;message&quot;</span><span class=\"token punctuation\" style=\"color:rgb(199, 146, 234)\">:</span><span class=\"token plain\"> </span><span class=\"token string-interpolation string\" style=\"color:rgb(195, 232, 141)\">f&quot;User </span><span class=\"token string-interpolation interpolation punctuation\" style=\"color:rgb(199, 146, 234)\">{</span><span class=\"token string-interpolation interpolation\">username</span><span class=\"token string-interpolation interpolation punctuation\" style=\"color:rgb(199, 146, 234)\">}</span><span class=\"token string-interpolation string\" style=\"color:rgb(195, 232, 141)\"> updated!&quot;</span><span class=\"token punctuation\" style=\"color:rgb(199, 146, 234)\">}</span><span class=\"token punctuation\" style=\"color:rgb(199, 146, 234)\">,</span><span class=\"token plain\"> </span><span class=\"token number\" style=\"color:rgb(247, 140, 108)\">200</span><br/></span></code></pre></div></div>\n"}, {"Question": "What git command is necessary to ensure that git is tracking your changes in your local repository?\n", "Answer": "git init\n"}, {"Question": "what HTTP method manipulates existing data?\n", "Answer": "PUT\n"}, {"Question": "How would you solve any problem ? Suggest 5 steps\n", "Answer": "1. Understand the problem\n2. Model the problem\n3. Write and algorithm\n4. write tests\n5. refactor and reflect\n"}, {"Question": "<p>What is a port in the context of networking?</p>\n", "Answer": "<p><strong>Answer</strong>:</p><p>B) A software-based number used to identify specific processes or services on a networked device.</p><p><strong>Explanation</strong>:</p><p>In networking, a port is a logical number used by protocols to distinguish different processes or services running on a single networked device. For example, port 80 is commonly used for HTTP traffic, while port 443 is used for HTTPS.</p>\n"}, {"Question": "<p>What is the main difference between HTTP and HTTPS?</p>\n", "Answer": "<p><strong>Answer</strong>:</p><p>B) HTTP is a protocol used for transferring data in plain text, while HTTPS is the secure version of HTTP that encrypts data to protect it during transmission.</p><p><strong>Explanation</strong>:\nHTTP (Hypertext Transfer Protocol) transmits data over the web without encryption, meaning the data is sent in plain text and can be intercepted or read by third parties.\nHTTPS (Hypertext Transfer Protocol Secure) builds on HTTP by adding a layer of security through encryption using TLS/SSL. This ensures that the data exchanged between the client and server is encrypted, providing confidentiality and integrity, which helps protect sensitive information like login credentials and personal data.</p>\n"}, {"Question": "<p>What is a path parameter, and how is it used in an API endpoint?\n.</p>\n", "Answer": "<p><strong>Answer</strong>:</p><p>C) A path parameter is part of the URL that is used to pass data dynamically. It is included in the URL path itself and not as a query parameter.</p><p><strong>Explanation</strong>:</p><p>A path parameter is a dynamic part of the URL path that is used to pass data to the server. Consider the following code:</p><div class=\"language-py codeBlockContainer_Ckt0 theme-code-block\" style=\"--prism-color:#bfc7d5;--prism-background-color:#292d3e\"><div class=\"codeBlockContent_QJqH\"><pre tabindex=\"0\" class=\"prism-code language-py codeBlock_bY9V thin-scrollbar\" style=\"color:#bfc7d5;background-color:#292d3e\"><code class=\"codeBlockLines_e6Vv\"><span class=\"token-line\" style=\"color:#bfc7d5\"><span class=\"token decorator annotation punctuation\" style=\"color:rgb(199, 146, 234)\">@app</span><span class=\"token decorator annotation punctuation\" style=\"color:rgb(199, 146, 234)\">.</span><span class=\"token decorator annotation punctuation\" style=\"color:rgb(199, 146, 234)\">route</span><span class=\"token punctuation\" style=\"color:rgb(199, 146, 234)\">(</span><span class=\"token string\" style=\"color:rgb(195, 232, 141)\">&#x27;/books/&lt;isbn&gt;&#x27;</span><span class=\"token punctuation\" style=\"color:rgb(199, 146, 234)\">,</span><span class=\"token plain\"> methods </span><span class=\"token operator\" style=\"color:rgb(137, 221, 255)\">=</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:rgb(199, 146, 234)\">[</span><span class=\"token string\" style=\"color:rgb(195, 232, 141)\">&#x27;GET&#x27;</span><span class=\"token punctuation\" style=\"color:rgb(199, 146, 234)\">]</span><span class=\"token punctuation\" style=\"color:rgb(199, 146, 234)\">)</span><span class=\"token plain\"></span><br/></span><span class=\"token-line\" style=\"color:#bfc7d5\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"font-style:italic\">def</span><span class=\"token plain\"> </span><span class=\"token function\" style=\"color:rgb(130, 170, 255)\">get_book</span><span class=\"token punctuation\" style=\"color:rgb(199, 146, 234)\">(</span><span class=\"token plain\">isbn</span><span class=\"token punctuation\" style=\"color:rgb(199, 146, 234)\">)</span><span class=\"token punctuation\" style=\"color:rgb(199, 146, 234)\">:</span><span class=\"token plain\"></span><br/></span><span class=\"token-line\" style=\"color:#bfc7d5\"><span class=\"token plain\">\t</span><span class=\"token keyword\" style=\"font-style:italic\">return</span><span class=\"token plain\"> get_book_by_ISBN</span><span class=\"token punctuation\" style=\"color:rgb(199, 146, 234)\">(</span><span class=\"token plain\">isbn</span><span class=\"token punctuation\" style=\"color:rgb(199, 146, 234)\">)</span><br/></span></code></pre></div></div><p>In the URL <code>/books/&lt;isbn&gt;</code>, the <code>&lt;isbn&gt;</code> is a placeholder for a specific book&#x27;s ISBN, allowing the API to retrieve that specific book. In Flask, the path parameter is wrapped in &lt; &gt;, and its value is passed to the view function as a parameter.</p><p><em>Note</em>: it is fine if you haven&#x27;t specified the methods, as this is implicit with Flask. However, it&#x27;s usually good practice to do so.</p>\n"}, {"Question": "<p>What does Polymorphism mean in OOP?</p>\n", "Answer": "<p><strong>Answer</strong>:</p><p>B) Objects of different classes having the same interface</p><p><strong>Explanation</strong>:</p><p>Polymorphism in OOP allows objects of different classes to be treated as objects of a common superclass. The key feature is that the same method or operation can behave differently depending on the object that it is acting upon, enabling flexibility and code reuse.</p>\n"}]